import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import tkinter.filedialog as filedialog
import os
import threading
from config import Config
from sort_library import MediaLibrarySorter
from database_manager import DatabaseManager

class SampleSorterGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Sample Sorter - AENDY STUDIO")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏
        try:
            self.root.iconbitmap("icon.ico")
        except:
            pass
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.source_path = tk.StringVar(value="D:/Downloads")
        self.library_path = tk.StringVar(value=Config.DEFAULT_LIBRARY_PATH)
        self.recursive = tk.BooleanVar(value=True)
        self.min_size = tk.IntVar(value=1)
        self.create_backup = tk.BooleanVar(value=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        self.initialize_library()
        
        self.root.mainloop()

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üéµ Sample Sorter", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –°–µ–∫—Ü–∏—è –ø—É—Ç–µ–π
        path_frame = ttk.LabelFrame(main_frame, text="–ü—É—Ç–∏", padding="10")
        path_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        path_frame.columnconfigure(1, weight=1)
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        ttk.Label(path_frame, text="–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        ttk.Entry(path_frame, textvariable=self.source_path, width=50).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5))
        ttk.Button(path_frame, text="–û–±–∑–æ—Ä", command=self.browse_source).grid(row=0, column=2)
        
        # –ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        ttk.Label(path_frame, text="–ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5), pady=(10, 0))
        ttk.Entry(path_frame, textvariable=self.library_path, width=50).grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(0, 5), pady=(10, 0))
        ttk.Button(path_frame, text="–û–±–∑–æ—Ä", command=self.browse_library).grid(row=1, column=2, pady=(10, 0))
        
        # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ß–µ–∫–±–æ–∫—Å—ã
        ttk.Checkbutton(settings_frame, text="–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫", variable=self.recursive).grid(row=0, column=0, sticky=tk.W)
        ttk.Checkbutton(settings_frame, text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", variable=self.create_backup).grid(row=0, column=1, sticky=tk.W, padx=(20, 0))
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        ttk.Label(settings_frame, text="–ú–∏–Ω. —Ä–∞–∑–º–µ—Ä (KB):").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        ttk.Entry(settings_frame, textvariable=self.min_size, width=10).grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=3, pady=10)
        
        ttk.Button(button_frame, text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É", 
                  command=self.start_sorting).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üìÅ –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É", 
                  command=self.create_structure).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                  command=self.show_statistics).pack(side=tk.LEFT)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="10")
        log_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, width=80)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
        dev_label = ttk.Label(main_frame, text="AENDY STUDIO", 
                             font=("Arial", 10, "bold"), foreground="gray")
        dev_label.grid(row=6, column=0, columnspan=3, pady=(5, 0))

    def browse_source(self):
        path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É")
        if path:
            self.source_path.set(path)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {path}")

    def browse_library(self):
        path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
        if path:
            self.library_path.set(path)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {path}")

    def initialize_library(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        try:
            if not os.path.exists(self.library_path.get()):
                self.create_structure()
            else:
                self.log_message("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    def create_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        try:
            Config.create_library_structure(self.library_path.get())
            self.log_message("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞–Ω–∞!")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {e}")

    def start_sorting(self):
        """–ó–∞–ø—É—Å–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not os.path.exists(self.source_path.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        if not os.path.exists(self.library_path.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.sort_files_thread)
        thread.daemon = True
        thread.start()
        
        self.progress.start()

    def sort_files_thread(self):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É...")
            
            sorter = MediaLibrarySorter(
                source=self.source_path.get(),
                library=self.library_path.get(),
                recursive=self.recursive.get(),
                min_size=self.min_size.get()
            )
            
            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(progress, message):
                self.root.after(0, lambda: self.log_message(f"{message} ({progress:.1f}%)"))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            success = sorter.sort_files(progress_callback)
            
            if success:
                stats = sorter.get_statistics()
                self.log_message(f"‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                self.log_message(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['processed']} –∏–∑ {stats['total']}")
                self.log_message(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
                
                self.root.after(0, lambda: messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", 
                    f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['processed']} –∏–∑ {stats['total']}\n"
                    f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%"))
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ"))
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}"))
        finally:
            self.root.after(0, self.progress.stop)

    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = self.db.get_statistics()
            
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n"
            stats_text += f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}\n"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            total_size_mb = stats['total_size'] / (1024 * 1024)
            stats_text += f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB\n\n"
            
            stats_text += "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category, count, size in stats['categories']:
                size_mb = size / (1024 * 1024) if size else 0
                stats_text += f"  {category}: {count} —Ñ–∞–π–ª–æ–≤ ({size_mb:.1f} MB)\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
            recent_files = self.db.get_recent_files(5)
            if recent_files:
                stats_text += f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n"
                for filename, category, timestamp in recent_files:
                    stats_text += f"  {filename} -> {category}\n"
            
            self.log_message(stats_text)
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()

if __name__ == "__main__":
    app = SampleSorterGUI() 