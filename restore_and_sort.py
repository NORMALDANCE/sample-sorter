#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Restore and Sort - –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–ó–∞–ø—É—Å–∫: python restore_and_sort.py
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import tkinter.filedialog as filedialog
import os
import threading
import shutil
from datetime import datetime
from config import Config
from sort_library import MediaLibrarySorter
from database_manager import DatabaseManager

class RestoreAndSortGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Restore & Sort - AENDY STUDIO")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.mixed_folder = tk.StringVar(value="")
        self.library_path = tk.StringVar(value=Config.DEFAULT_LIBRARY_PATH)
        self.recursive = tk.BooleanVar(value=True)
        self.min_size = tk.IntVar(value=1)
        self.create_backup = tk.BooleanVar(value=True)
        self.auto_restore = tk.BooleanVar(value=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseManager()
        
        self.root.mainloop()

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üîÑ Restore & Sort - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –°–µ–∫—Ü–∏—è –ø–∞–ø–∫–∏ —Å —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        mixed_frame = ttk.LabelFrame(main_frame, text="–ü–∞–ø–∫–∞ —Å —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏", padding="10")
        mixed_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        mixed_frame.columnconfigure(1, weight=1)
        
        ttk.Label(mixed_frame, text="–ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        ttk.Entry(mixed_frame, textvariable=self.mixed_folder, width=60).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5))
        ttk.Button(mixed_frame, text="–û–±–∑–æ—Ä", command=self.browse_mixed_folder).grid(row=0, column=2)
        
        # –°–µ–∫—Ü–∏—è –ø—É—Ç–µ–π
        path_frame = ttk.LabelFrame(main_frame, text="–ü—É—Ç–∏", padding="10")
        path_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        path_frame.columnconfigure(1, weight=1)
        
        # –ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        ttk.Label(path_frame, text="–ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        ttk.Entry(path_frame, textvariable=self.library_path, width=60).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5))
        ttk.Button(path_frame, text="–û–±–∑–æ—Ä", command=self.browse_library).grid(row=0, column=2)
        
        # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        settings_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ß–µ–∫–±–æ–∫—Å—ã
        ttk.Checkbutton(settings_frame, text="–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫", variable=self.recursive).grid(row=0, column=0, sticky=tk.W)
        ttk.Checkbutton(settings_frame, text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", variable=self.create_backup).grid(row=0, column=1, sticky=tk.W, padx=(20, 0))
        ttk.Checkbutton(settings_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", variable=self.auto_restore).grid(row=0, column=2, sticky=tk.W, padx=(20, 0))
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        ttk.Label(settings_frame, text="–ú–∏–Ω. —Ä–∞–∑–º–µ—Ä (KB):").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        ttk.Entry(settings_frame, textvariable=self.min_size, width=10).grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=3, pady=10)
        
        ttk.Button(button_frame, text="üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤", 
                  command=self.analyze_files).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.restore_and_sort).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üìÅ –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É", 
                  command=self.create_structure).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                  command=self.show_statistics).pack(side=tk.LEFT)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="10")
        log_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(5, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=20, width=100)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
        dev_label = ttk.Label(main_frame, text="AENDY STUDIO", 
                             font=("Arial", 10, "bold"), foreground="gray")
        dev_label.grid(row=7, column=0, columnspan=3, pady=(5, 0))

    def browse_mixed_folder(self):
        path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        if path:
            self.mixed_folder.set(path)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏: {path}")

    def browse_library(self):
        path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
        if path:
            self.library_path.set(path)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {path}")

    def create_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        try:
            Config.create_library_structure(self.library_path.get())
            self.log_message("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞–Ω–∞!")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {e}")

    def analyze_files(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        if not self.mixed_folder.get() or not os.path.exists(self.mixed_folder.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏!")
            return
        
        thread = threading.Thread(target=self.analyze_files_thread)
        thread.daemon = True
        thread.start()
        self.progress.start()

    def analyze_files_thread(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...")
            
            file_stats = {
                'total': 0,
                'audio': 0,
                'vst': 0,
                'projects': 0,
                'presets': 0,
                'midi': 0,
                'documents': 0,
                'uncategorized': 0,
                'categories': {}
            }
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for root, _, files in os.walk(self.mixed_folder.get()):
                for file in files:
                    file_path = os.path.join(root, file)
                    if os.path.isfile(file_path):
                        file_stats['total'] += 1
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                        ext = os.path.splitext(file)[1].lower()
                        category = Config.get_category_by_extension(ext)
                        
                        if category == "AUDIO":
                            file_stats['audio'] += 1
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                            subcategory = self.get_audio_subcategory(file)
                            if subcategory not in file_stats['categories']:
                                file_stats['categories'][subcategory] = 0
                            file_stats['categories'][subcategory] += 1
                        elif category == "VST_PLUGINS":
                            file_stats['vst'] += 1
                        elif category == "PROJECTS":
                            file_stats['projects'] += 1
                        elif category == "PRESETS":
                            file_stats['presets'] += 1
                        elif category == "MIDI":
                            file_stats['midi'] += 1
                        elif category == "DOCUMENTS":
                            file_stats['documents'] += 1
                        else:
                            file_stats['uncategorized'] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.log_message(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            self.log_message(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {file_stats['total']}")
            self.log_message(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã: {file_stats['audio']}")
            self.log_message(f"VST –ø–ª–∞–≥–∏–Ω—ã: {file_stats['vst']}")
            self.log_message(f"–ü—Ä–æ–µ–∫—Ç—ã: {file_stats['projects']}")
            self.log_message(f"–ü—Ä–µ—Å–µ—Ç—ã: {file_stats['presets']}")
            self.log_message(f"MIDI: {file_stats['midi']}")
            self.log_message(f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {file_stats['documents']}")
            self.log_message(f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ: {file_stats['uncategorized']}")
            
            if file_stats['categories']:
                self.log_message(f"\nüéµ –ê—É–¥–∏–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for category, count in file_stats['categories'].items():
                    self.log_message(f"  {category}: {count}")
            
            self.root.after(0, lambda: messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_stats['total']}\n"
                f"–ê—É–¥–∏–æ: {file_stats['audio']}\n"
                f"VST: {file_stats['vst']}\n"
                f"–ü—Ä–æ–µ–∫—Ç—ã: {file_stats['projects']}"))
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"))
        finally:
            self.root.after(0, self.progress.stop)

    def get_audio_subcategory(self, filename):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        filename_lower = filename.lower()
        
        for category, settings in Config.CATEGORY_KEYWORDS.items():
            if category in ["DUPLICATES", "UNCATEGORIZED", "VST_PLUGINS", "PROJECTS", "PRESETS", "MIDI", "DOCUMENTS"]:
                continue
                
            for subcategory, keywords in settings.items():
                for keyword in keywords:
                    if keyword in filename_lower:
                        return f"{category}/{subcategory}"
        
        return "UNCATEGORIZED"

    def restore_and_sort(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        if not self.mixed_folder.get() or not os.path.exists(self.mixed_folder.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏!")
            return
            
        if not os.path.exists(self.library_path.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        thread = threading.Thread(target=self.restore_and_sort_thread)
        thread.daemon = True
        thread.start()
        self.progress.start()

    def restore_and_sort_thread(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É...")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            Config.create_library_structure(self.library_path.get())
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.create_backup.get():
                backup_path = os.path.join(self.library_path.get(), "BACKUP", datetime.now().strftime("%Y%m%d_%H%M%S"))
                os.makedirs(backup_path, exist_ok=True)
                self.log_message(f"üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤: {backup_path}")
            
            sorter = MediaLibrarySorter(
                source=self.mixed_folder.get(),
                library=self.library_path.get(),
                recursive=self.recursive.get(),
                min_size=self.min_size.get()
            )
            
            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(progress, message):
                self.root.after(0, lambda: self.log_message(f"{message} ({progress:.1f}%)"))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            success = sorter.sort_files(progress_callback)
            
            if success:
                stats = sorter.get_statistics()
                self.log_message(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                self.log_message(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['processed']} –∏–∑ {stats['total']}")
                self.log_message(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
                
                self.root.after(0, lambda: messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", 
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['processed']} –∏–∑ {stats['total']}\n"
                    f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%"))
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ"))
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}"))
        finally:
            self.root.after(0, self.progress.stop)

    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = self.db.get_statistics()
            
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n"
            stats_text += f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}\n"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            total_size_mb = stats['total_size'] / (1024 * 1024)
            stats_text += f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB\n\n"
            
            stats_text += "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category, count, size in stats['categories']:
                size_mb = size / (1024 * 1024) if size else 0
                stats_text += f"  {category}: {count} —Ñ–∞–π–ª–æ–≤ ({size_mb:.1f} MB)\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
            recent_files = self.db.get_recent_files(5)
            if recent_files:
                stats_text += f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n"
                for filename, category, timestamp in recent_files:
                    stats_text += f"  {filename} -> {category}\n"
            
            self.log_message(stats_text)
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()

if __name__ == "__main__":
    app = RestoreAndSortGUI() 